package com.Atieh.reportsmobile;

import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;

import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;

import retrofit.Callback;
import retrofit.RetrofitError;
import retrofit.client.Response;
import webservices.ServiceGenerator;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.graphics.Typeface;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.AsyncTask;
import android.os.Bundle;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.Gravity;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.inputmethod.InputMethodManager;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.Toast;
import authenticationPack.Authentication;
import authenticationPack.AuthenticationInterface;

public class MainActivity extends Activity {
	LinearLayout loadinglayer;

	public static final String baseURL = "http://webservice.atiehpardaz.com/reportService/ReportService.svc";
	ImageButton login;
	Authentication authenticate;
	EditText et_username, et_password;
	AuthenticationInterface auth;
	public static Typeface titr;

	public void initview() {
		login = (ImageButton) findViewById(R.id.imgbtn_login);
		et_username = (EditText) findViewById(R.id.et_username);
		et_password = (EditText) findViewById(R.id.et_password);
		loadinglayer = (LinearLayout) findViewById(R.id.linearpb_doamin);

	}

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);

		initview();
		loadinglayer.setVisibility(View.INVISIBLE);

		titr = Typeface.createFromAsset(MainActivity.this.getAssets(),
				"titr.TTF");

		login.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {

				final InputMethodManager imm = (InputMethodManager) getApplicationContext()
						.getSystemService(Context.INPUT_METHOD_SERVICE);
				imm.hideSoftInputFromWindow(arg0.getWindowToken(), 0);

				if (et_username.getText().toString().matches("")
						&& et_password.getText().toString().matches("")) {
					Toast.makeText(MainActivity.this,
							"نام کاربری و رمز عبور را وارد نمایید",
							Toast.LENGTH_LONG).show();

				} else if (et_password.getText().toString().matches("")) {
					Toast.makeText(MainActivity.this,
							"رمز عبور را وارد نمایید", Toast.LENGTH_LONG)
							.show();
				} else if (et_username.getText().toString().matches("")) {
					Toast.makeText(MainActivity.this,
							"نام کاربری راوارد نمایید", Toast.LENGTH_LONG)
							.show();
				} else {
					
					asyncTask as = new asyncTask(); // checking network
					// status
					as.execute("P");


				}
				
				

				// for check user & pas

				// < for login ========================
				// loadinglayer.setVisibility(View.VISIBLE);

			}

		});
		et_password.setGravity(Gravity.RIGHT);
		et_password.addTextChangedListener(new TextWatcher() {

			@Override
			public void onTextChanged(CharSequence s, int start, int before,
					int count) {
				if (et_password.getText().length() == 0) {
					et_password.setGravity(Gravity.RIGHT);
				} else {
					et_password.setGravity(Gravity.LEFT);
				}

			}

			@Override
			public void afterTextChanged(Editable s) {
				// TODO Auto-generated method stub

			}

			@Override
			public void beforeTextChanged(CharSequence s, int start, int count,
					int after) {
				// TODO Auto-generated method stub

			}

		});

		if (getIntent().getBooleanExtra("EXIT", false)) {
			finish();
		}

	}

	public static void hideSoftKeyboard(Activity activity) {

	}

	
	public void autenticateUser() {
		
		authenticate = new Authentication();
		auth = ServiceGenerator.createService(AuthenticationInterface.class,
				MainActivity.baseURL);

		authenticate = auth.authenticate(et_username.getText().toString(), et_password
				.getText().toString());

		if (authenticate.getStatus() != null) {

			if (authenticate.getStatus().getCode() == 1) {

				Toast.makeText(MainActivity.this,
						authenticate.getStatus().getMessage(), 1).show();

				startActivity(new Intent(MainActivity.this,
						SelectDomainActivity.class));
			}

			else {

				Toast.makeText(MainActivity.this,
						authenticate.getStatus().getMessage(), 1).show();
			}

		}
	}
	
	
	
	
	
	
	public int netStatus(String url) {

		int resCode;
		if (isNetworkAvailable()) {

			HttpGet httpRequest = null;
			try {
				httpRequest = new HttpGet(new URI(url));
			} catch (URISyntaxException e) {
				e.printStackTrace();
			}

			HttpClient httpclient = new DefaultHttpClient();
			HttpResponse response = null;

			try {
				response = httpclient.execute(httpRequest);

			} catch (ClientProtocolException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}

			resCode = response.getStatusLine().getStatusCode();
		}

		else {
			resCode = 1000; // our code for no network connected or connecting
		}

		return resCode;
	}

	public String httpRequestMessage(int responseCode) {
		String message = "";
		switch (responseCode) {
		case 200:
			message = "";
			break;
		case 401:
			message = "عدم دسترسی لازم جهت اتصال به سرور";
			break;
		case 400:
			message = "خطا در برقرای ارتباط. لطفا مجددا تلاش نمایید";
			break;

		case 404:
			message = "وب سایت پذیرنده در دسترس نمی باشد. لطفا در زمانی دیگر تلاش نمایید.";
			break;

		case 1000: // our code for no network connected or connecting
			message = "لطفا از روشن بودن دیتای موبایل و یا وایرلس خود و اتصال به اینترنت اطمینان حاصل نمایید.";
			break;

		default:
			message = "خطای ناشناخته شماره :" + Integer.toString(responseCode);
		}

		return message;
	}

	private boolean isNetworkAvailable() {

		ConnectivityManager cm = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
		NetworkInfo netInfo = cm.getActiveNetworkInfo();
		if (netInfo != null && netInfo.isConnectedOrConnecting()) {
			return true;
		} else {
			return false;
		}

	}

	public class asyncTask extends AsyncTask<String, String, String> {

		@Override
		protected void onPreExecute() {

			//progbar_progress.setVisibility(View.VISIBLE);
			//linear1.setVisibility(View.VISIBLE);
			loadinglayer.setVisibility(View.VISIBLE);
		}

		@Override
		protected String doInBackground(String... arg0) {

			return httpRequestMessage(netStatus("http://atiehpardaz.com/default.aspx?lng=fa"));
		}

		@Override
		protected void onPostExecute(String result) {

			loadinglayer.setVisibility(View.INVISIBLE);
			
			if (result != "") {
				Toast.makeText(MainActivity.this, result, Toast.LENGTH_SHORT)
						.show();
			} else {
				Toast.makeText(MainActivity.this, " اتصال به سرور برقرار شد",
						Toast.LENGTH_SHORT).show();
			autenticateUser();

			}
		}
	}


}
